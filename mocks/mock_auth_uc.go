// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gosom/bookclub (interfaces: AuthUseCases)
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./mocks/mock_auth_uc.go . AuthUseCases
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	bookclub "github.com/gosom/bookclub"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthUseCases is a mock of AuthUseCases interface.
type MockAuthUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCasesMockRecorder
}

// MockAuthUseCasesMockRecorder is the mock recorder for MockAuthUseCases.
type MockAuthUseCasesMockRecorder struct {
	mock *MockAuthUseCases
}

// NewMockAuthUseCases creates a new mock instance.
func NewMockAuthUseCases(ctrl *gomock.Controller) *MockAuthUseCases {
	mock := &MockAuthUseCases{ctrl: ctrl}
	mock.recorder = &MockAuthUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUseCases) EXPECT() *MockAuthUseCasesMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthUseCases) Login(arg0 context.Context, arg1 bookclub.LoginParams) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockAuthUseCasesMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUseCases)(nil).Login), arg0, arg1)
}
