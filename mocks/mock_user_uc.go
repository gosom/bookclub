// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gosom/bookclub (interfaces: UserUseCases)
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./mocks/mock_user_uc.go . UserUseCases
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	bookclub "github.com/gosom/bookclub"
	gomock "go.uber.org/mock/gomock"
)

// MockUserUseCases is a mock of UserUseCases interface.
type MockUserUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCasesMockRecorder
}

// MockUserUseCasesMockRecorder is the mock recorder for MockUserUseCases.
type MockUserUseCasesMockRecorder struct {
	mock *MockUserUseCases
}

// NewMockUserUseCases creates a new mock instance.
func NewMockUserUseCases(ctrl *gomock.Controller) *MockUserUseCases {
	mock := &MockUserUseCases{ctrl: ctrl}
	mock.recorder = &MockUserUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCases) EXPECT() *MockUserUseCasesMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockUserUseCases) Register(arg0 context.Context, arg1 bookclub.RegisterParams) (bookclub.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(bookclub.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserUseCasesMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUseCases)(nil).Register), arg0, arg1)
}
